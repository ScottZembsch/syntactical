const prompts = {

	javascript: ['let ', 'device; ', 'navigator.usb.requestDevice({ ', '[{ ', 'vendorId: ', '0x2341 ', '}] ', '})', '.then(selectedDevice ', '=> ', '{device ', '= ', 'selectedDevice;', 'return ', 'device.open();', '})', '.then(() ', '=> ', 'device.selectConfiguration(1))', '.then(() ', '=> ', 'device.claimInterface(2))', '.then(() ', '=> ', 'device.controlTransferOut({', 'requestType: ', "'class',", 'recipient: ', "'interface',", 'request: ', '0x22,', 'value: ', '0x01', 'index: ', '0x02}))', '.then(result ', '=> ', '{', 'let ', 'decoder ', '= ', 'new ', 'TextDecoder();', "console.log('Recieved: ' ", "+ ", 'decoder.decode(result.data));', '})', '.catch(error ', '=> ', '{ ', 'console.log(error); ', '});'],

	python: ['def ', 'get_user_input(prompt): ','user_input ','= ','input(prompt) ','return ', 'user_input.strip() ','def ', 'ask_question(question, ', 'answer): ', 'user_answer ', '= ', 'get_user_input(question ', '+ ', '" ', '")', 'if ', 'user_answer.lower() ', '== ', 'answer.lower(): ', 'print("Correct!")', 'return ','1', 'else: ', 'print(f"Wrong! ', 'The ', 'correct ', 'answer ', 'is ', '{answer}.")', 'return ', '0', 'def ', 'quiz():', 'score ', '= ', '0 ', 'for ','question, ', 'answer ', 'in ', 'random.sample(questions.items(), ', 'k=len(questions)): ', 'score ', '+= ', 'ask_question(question, ', 'answer)', 'print(f"You ', 'scored ', '{score}/{len(questions)}.") ', 'if ', '__name__ ', '== ', '"__main__":', 'print("Welcome ', 'to ', 'the ', 'Quiz!")', 'quiz()'],

	rust: ['use ', 'reqwest; ', 'use ', 'serde_json::Value;', 'use ', 'std::env;', '#[cfg(test)]', 'use ', 'mockito;', 'fn ', 'main() ', '-> ', 'Result<(), ', 'reqwest::Error> ', '{', 'let ', 'api_key ', '= ', '"YOUR_API_KEY";','let ', 'city ', '= ', '"London";', 'let ' , 'url ', '= ', 'format!( ', '"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}",', 'city, ', 'api_key', ');', 'let ', 'response ', '= ', 'reqwest::blocking::get(&url)?;', 'if ', 'response.status().is_success() ', '{', 'let ', 'weather_data: ', 'Value ', '= ', 'response.json()?;', 'println!("Weather ', 'in ', '{}: ', '{}", ', 'city, ', 'weather_data);', 'save_to_mock_server(&weather_data);', '}', 'else ', '{', 'println!("Error: ', 'Unable ', 'to ', 'fetch ', 'weather data");', '}', 'Ok(())', '}', 'fn ', 'save_to_mock_server(weather_data: ', '&Value) ', '{', 'let ', 'mock_server_url ', '= ','format!("{}/weather", ','env::var("MOCK_SERVER_URL").unwrap_or_else(|_| ', '"http://127.0.0.1:1234".to_string()));'],

}



export default prompts;