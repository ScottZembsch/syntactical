{"ast":null,"code":"var _jsxFileName = \"/Users/whyel/Desktop/syntactical/src/components/PromptBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport prompts from '../prompts';\nimport '../Styles/promptbox.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PromptBox({\n  timeSelect,\n  langSelect\n}) {\n  _s();\n  // const promptArrRef = useRef(prompts[langSelect]);\n  // const prompt = promptArrRef.current;\n\n  //---------------------- STATE MANAGEMENT ---------------------- //\n  // LANG //\n  const promptArrRef = useRef(prompts[langSelect]);\n  const [prompt, setPrompt] = useState([]);\n  // USER INPUT //\n  const [userInput, setUserInput] = useState('');\n  const [currWordIndex, setCurrWordIndex] = useState(0);\n  const [currCharIndex, setCurrCharIndex] = useState(0);\n  const [correct, setCorrect] = useState(Array(promptArrRef.current.length).fill(''));\n  // SET CORRECT AND INCORRECT KEY PRESSES //\n  const [incorrectKeyPress, setIncorrectKeyPress] = useState([]);\n  const [correctKeyPress, setCorrectKeyPress] = useState(1);\n  // TIMER //\n  const [time, setTime] = React.useState(timeSelect);\n  const [timeStart, setTimeStart] = useState(false);\n  const [timeEnd, setTimeEnd] = useState(false);\n\n  // ---------------- UPDATES CLOCK TO CHOSEN TIME IN GAME MENU ---------------- //\n  useEffect(() => {\n    setTime(timeSelect);\n  }, [timeSelect]);\n\n  // ------------------- UPDATES PROMPT TEXT TO NEW LANG ------------------------ //\n  useEffect(() => {\n    console.log('change');\n    promptArrRef.current = prompts[langSelect];\n    setPrompt(promptArrRef.current); // Set the prompt when the language changes\n    setCorrect(Array(promptArrRef.current.length).fill('')); // Initialize with the correct length\n  }, [langSelect]);\n\n  // ------------ CHECKS IF PROMPT HAS ENDED AND RESETS GAME STATE ------------- //\n  useEffect(() => {\n    if (currWordIndex >= promptArrRef.current.length) {\n      gameRecap();\n      fullReset();\n    }\n  }, [currWordIndex, promptArrRef.current.length]);\n\n  // -------------------------- CHECKS FOR TIMER UP ----------------------- //\n  useEffect(() => {\n    if (timeEnd === true) {\n      gameRecap();\n      fullReset();\n    }\n  }, [timeEnd]);\n\n  // --------------------- TIMER FUNCTIONALITY TO COUNTDOWN ------------------- //\n  useEffect(() => {\n    let timeInt;\n    if (timeStart && time > 0) {\n      timeInt = setInterval(() => {\n        setTime(prevTimer => prevTimer - 1);\n      }, 1000);\n    }\n    if (time === 0) {\n      setTimeEnd(true);\n    }\n    return () => clearInterval(timeInt);\n  }, [timeStart, time]);\n\n  // -------------------------- GAME RECAP FUNCTION ---------------------- //\n  function gameRecap() {\n    console.log('words per min: ', getWPM(correct));\n  }\n\n  // ------------------------- GET WPM FUNCTION -------------------------- //\n  function getWPM(arr) {\n    const result = [];\n    const wpmArr = arr.filter(el => el !== '');\n    wpmArr.map(el => {\n      if (el.includes('.')) {\n        const newArr = el.split('.');\n        newArr.forEach(el => result.push(el));\n      } else {\n        result.push(el);\n      }\n    });\n    return result.length / 0.5;\n  }\n\n  // -------------------------- FUNCTION TO RESET GAMESTATE ------------------ //\n  function fullReset() {\n    setCurrCharIndex(0);\n    setCurrWordIndex(0);\n    setTimeStart(false);\n    setTimeEnd(false);\n    setTime(timeSelect);\n    setCorrect([]);\n    setCorrectKeyPress(1);\n    setIncorrectKeyPress([]);\n    setUserInput('');\n  }\n\n  // ----------------------- MAIN CHAR PROCESSING FUNCTION -------------------- //\n  function processInput(value) {\n    // check to see if the input is correct\n    if (value === promptArrRef.current[currWordIndex][currCharIndex]) {\n      const newCorrect = [...correct];\n      newCorrect[currWordIndex] += value;\n      setCorrectKeyPress(correctKeyPress + 1);\n      setCorrect(newCorrect);\n\n      // Update the character index for the current word\n      setCurrCharIndex(index => index + 1);\n      if (prompt[currWordIndex].length - 1 === currCharIndex) {\n        setCurrWordIndex(index => index + 1);\n        // Reset the character index for the next word\n        setCurrCharIndex(0);\n      }\n    } else {\n      // IF WRONG CHAR PRESSED AND ALSO NOT HITTING SAME WRONG KEY AGAIN //\n      if (incorrectKeyPress.length === 0 || value !== incorrectKeyPress[incorrectKeyPress.length - 1]) {\n        setIncorrectKeyPress([...incorrectKeyPress, value]);\n        console.log('errors : ', incorrectKeyPress.length + 1);\n      }\n    }\n  }\n\n  // ------------------------ RETURN MODULE ---------------------- //\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"promptbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"timer\",\n        children: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"newGame\",\n        onClick: () => fullReset(),\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"code-text\",\n      children: prompt.map((word, wordIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word\",\n        children: word.split('').map((char, charIndex) => {\n          var _correct$wordIndex;\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: ((_correct$wordIndex = correct[wordIndex]) === null || _correct$wordIndex === void 0 ? void 0 : _correct$wordIndex.charAt(charIndex)) === char ? 'correctChar' : charIndex === currCharIndex && wordIndex === currWordIndex ? 'currChar' : 'char',\n            children: char\n          }, charIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this);\n        })\n      }, wordIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-field\",\n      type: \"text\",\n      value: userInput,\n      placeholder: \"\",\n      onChange: e => {\n        processInput(e.target.value);\n        setTimeStart(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(PromptBox, \"2cEfMGunxS3bhdPf8nUYOGr6mzI=\");\n_c = PromptBox;\nexport default PromptBox;\nvar _c;\n$RefreshReg$(_c, \"PromptBox\");","map":{"version":3,"names":["React","useState","useRef","useEffect","prompts","jsxDEV","_jsxDEV","PromptBox","timeSelect","langSelect","_s","promptArrRef","prompt","setPrompt","userInput","setUserInput","currWordIndex","setCurrWordIndex","currCharIndex","setCurrCharIndex","correct","setCorrect","Array","current","length","fill","incorrectKeyPress","setIncorrectKeyPress","correctKeyPress","setCorrectKeyPress","time","setTime","timeStart","setTimeStart","timeEnd","setTimeEnd","console","log","gameRecap","fullReset","timeInt","setInterval","prevTimer","clearInterval","getWPM","arr","result","wpmArr","filter","el","map","includes","newArr","split","forEach","push","processInput","value","newCorrect","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","word","wordIndex","char","charIndex","_correct$wordIndex","charAt","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/whyel/Desktop/syntactical/src/components/PromptBox.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport prompts from '../prompts';\nimport '../Styles/promptbox.scss';\n\nfunction PromptBox({ timeSelect, langSelect }) {\n  // const promptArrRef = useRef(prompts[langSelect]);\n  // const prompt = promptArrRef.current;\n\n  //---------------------- STATE MANAGEMENT ---------------------- //\n  // LANG //\n  const promptArrRef = useRef(prompts[langSelect]);\n  const [prompt, setPrompt] = useState([])\n  // USER INPUT //\n  const [userInput, setUserInput] = useState('');\n  const [currWordIndex, setCurrWordIndex] = useState(0);\n  const [currCharIndex, setCurrCharIndex] = useState(0);\n  const [correct, setCorrect] = useState(Array(promptArrRef.current.length).fill(''));\n  // SET CORRECT AND INCORRECT KEY PRESSES //\n  const [incorrectKeyPress, setIncorrectKeyPress] = useState([]);\n  const [correctKeyPress, setCorrectKeyPress] = useState(1);\n  // TIMER //\n  const [time, setTime] = React.useState(timeSelect);\n  const [timeStart, setTimeStart] = useState(false);\n  const [timeEnd, setTimeEnd] = useState(false);\n\n  // ---------------- UPDATES CLOCK TO CHOSEN TIME IN GAME MENU ---------------- //\n  useEffect(() => {\n    setTime(timeSelect);\n  }, [timeSelect]);\n\n  // ------------------- UPDATES PROMPT TEXT TO NEW LANG ------------------------ //\n  useEffect(() => {\n    console.log('change');\n    promptArrRef.current = prompts[langSelect];\n    setPrompt(promptArrRef.current); // Set the prompt when the language changes\n    setCorrect(Array(promptArrRef.current.length).fill('')); // Initialize with the correct length\n  }, [langSelect]);\n\n\n  // ------------ CHECKS IF PROMPT HAS ENDED AND RESETS GAME STATE ------------- //\n  useEffect(() => {\n    if (currWordIndex >= promptArrRef.current.length) {\n      gameRecap();\n      fullReset();\n    }\n  }, [currWordIndex, promptArrRef.current.length]);\n\n  // -------------------------- CHECKS FOR TIMER UP ----------------------- //\n  useEffect(() => {\n    if (timeEnd === true) {\n      gameRecap();\n      fullReset();\n    }\n  }, [timeEnd]);\n\n  // --------------------- TIMER FUNCTIONALITY TO COUNTDOWN ------------------- //\n  useEffect(() => {\n    let timeInt;\n\n    if (timeStart && time > 0) {\n      timeInt = setInterval(() => {\n        setTime((prevTimer) => prevTimer - 1);\n      }, 1000);\n    }\n    if (time === 0) {\n      setTimeEnd(true);\n    }\n    return () => clearInterval(timeInt);\n  }, [timeStart, time]);\n\n  // -------------------------- GAME RECAP FUNCTION ---------------------- //\n  function gameRecap() {\n    console.log('words per min: ', getWPM(correct));\n  }\n\n  // ------------------------- GET WPM FUNCTION -------------------------- //\n  function getWPM(arr) {\n    const result = [];\n\n    const wpmArr = arr.filter((el) => el !== '');\n\n    wpmArr.map((el) => {\n      if (el.includes('.')) {\n        const newArr = el.split('.');\n        newArr.forEach((el) => result.push(el));\n      } else {\n        result.push(el);\n      }\n    });\n    return result.length / 0.5;\n  }\n\n  // -------------------------- FUNCTION TO RESET GAMESTATE ------------------ //\n  function fullReset() {\n    setCurrCharIndex(0);\n    setCurrWordIndex(0);\n    setTimeStart(false);\n    setTimeEnd(false);\n    setTime(timeSelect);\n    setCorrect([]);\n    setCorrectKeyPress(1);\n    setIncorrectKeyPress([]);\n    setUserInput('');\n  }\n\n  // ----------------------- MAIN CHAR PROCESSING FUNCTION -------------------- //\n  function processInput(value) {\n    // check to see if the input is correct\n    if (value === promptArrRef.current[currWordIndex][currCharIndex]) {\n      const newCorrect = [...correct];\n      newCorrect[currWordIndex] += value;\n      setCorrectKeyPress(correctKeyPress + 1);\n      setCorrect(newCorrect);\n\n      // Update the character index for the current word\n      setCurrCharIndex((index) => index + 1);\n\n      if (prompt[currWordIndex].length - 1 === currCharIndex) {\n        setCurrWordIndex((index) => index + 1);\n        // Reset the character index for the next word\n        setCurrCharIndex(0);\n      }\n    } else {\n      // IF WRONG CHAR PRESSED AND ALSO NOT HITTING SAME WRONG KEY AGAIN //\n      if (\n        incorrectKeyPress.length === 0 ||\n        value !== incorrectKeyPress[incorrectKeyPress.length - 1]\n      ) {\n        setIncorrectKeyPress([...incorrectKeyPress, value]);\n        console.log('errors : ', incorrectKeyPress.length + 1);\n      }\n    }\n  }\n\n  // ------------------------ RETURN MODULE ---------------------- //\n  return (\n    <div className='promptbox'>\n      {/* TIMER */}\n      <div className='game-menu'>\n        <span className='timer'>{time}</span>\n        <button id='newGame' onClick={() => fullReset()}>\n          New Game\n        </button>\n      </div>\n\n      {/* TEXT PROMPT */}\n      <div id='code-text'>\n        {prompt.map((word, wordIndex) => (\n          <div className='word' key={wordIndex}>\n            {word.split('').map((char, charIndex) => (\n              <span\n                key={charIndex}\n                className={\n                  correct[wordIndex]?.charAt(charIndex) === char\n                    ? 'correctChar'\n                    : charIndex === currCharIndex && wordIndex === currWordIndex\n                    ? 'currChar'\n                    : 'char'\n                }\n              >\n                {char}\n              </span>\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* INPUT FEILD */}\n      <input\n        id='input-field'\n        type='text'\n        value={userInput}\n        placeholder=''\n        onChange={(e) => {\n          processInput(e.target.value);\n          setTimeStart(true);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default PromptBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}