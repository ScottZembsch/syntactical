{"ast":null,"code":"const prompts = {\n  javascript: ['let ', 'device; ', 'navigator.usb.requestDevice({ ', '[{ ', 'vendorId: ', '0x2341 ', '}] ', '})', '.then(selectedDevice ', '=> ', '{device ', '= ', 'selectedDevice;', 'return ', 'device.open();', '})', '.then(() ', '=> ', 'device.selectConfiguration(1))', '.then(() ', '=> ', 'device.claimInterface(2))', '.then(() ', '=> ', 'device.controlTransferOut({', 'requestType: ', \"'class',\", 'recipient: ', \"'interface',\", 'request: ', '0x22,', 'value: ', '0x01', 'index: ', '0x02}))', '.then(result ', '=> ', '{', 'let ', 'decoder ', '= ', 'new ', 'TextDecoder();', \"console.log('Recieved: ' \", \"+ \", 'decoder.decode(result.data));', '})', '.catch(error ', '=> ', '{ ', 'console.log(error); ', '});'],\n  python: ['def ', 'get_user_input(prompt): ', 'user_input ', '= ', 'input(prompt) ', 'return ', 'user_input.strip() ', 'def ', 'ask_question(question, ', 'answer): ', 'user_answer ', '= ', 'get_user_input(question ', '+ ', '\" ', '\")', 'if ', 'user_answer.lower() ', '== ', 'answer.lower(): ', 'print(\"Correct!\")', 'return ', '1', 'else: ', 'print(f\"Wrong! ', 'The ', 'correct ', 'answer ', 'is ', '{answer}.\")', 'return ', '0', 'def ', 'quiz():', 'score ', '= ', '0', 'for ', 'question, ', 'answer ', 'in ', 'random.sample(questions.items(), ', 'k=len(questions)): ', 'score ', '+= ', 'ask_question(question, ', 'answer)', 'print(f\"You ', 'scored ', '{score}/{len(questions)}.\")', 'if ', '__name__ ', '== ', '\"__main__\":', 'print(\"Welcome ', 'to ', 'the ', 'Quiz!\")', 'quiz()'],\n  rust: ['use ', 'reqwest;', 'use ', 'serde_json::Value;', 'use ', 'std::env;', '#[cfg(test)]', 'use ', 'mockito;', 'fn ', 'main() ', '-> ', 'Result<(), ', 'reqwest::Error> ', '{', 'let ', 'api_key ', '= ', '\"YOUR_API_KEY\";', 'let ', 'city ', '= ', '\"London\";', 'let ', 'url ', '= ', 'format!( ', '\"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}\",', 'city, ', 'api_key', ');', 'let ', 'response ', '= ', 'reqwest::blocking::get(&url)?;', 'if ', 'response.status().is_success() ', '{', 'let ', 'weather_data: ', 'Value ', '= ', 'response.json()?;', 'println!(\"Weather ', 'in ', '{}: ', '{}\", ', 'city, ', 'weather_data);', 'save_to_mock_server(&weather_data);', '}', 'else ', '{', 'println!(\"Error: ', 'Unable ', 'to ', 'fetch ', 'weather data\");', '}', 'Ok(())', '}', 'fn ', 'save_to_mock_server(weather_data: ', '&Value) ', '{', 'let ', 'mock_server_url ', '= ', 'format!(\"{}/weather\", ', 'env::var(\"MOCK_SERVER_URL\").unwrap_or_else(|_| ', '\"http://127.0.0.1:1234\".to_string()));']\n};\nexport default prompts;","map":{"version":3,"names":["prompts","javascript","python","rust"],"sources":["/Users/whyel/Desktop/syntactical/src/prompts.js"],"sourcesContent":["const prompts = {\n\n\tjavascript: ['let ', 'device; ', 'navigator.usb.requestDevice({ ', '[{ ', 'vendorId: ', '0x2341 ', '}] ', '})', '.then(selectedDevice ', '=> ', '{device ', '= ', 'selectedDevice;', 'return ', 'device.open();', '})', '.then(() ', '=> ', 'device.selectConfiguration(1))', '.then(() ', '=> ', 'device.claimInterface(2))', '.then(() ', '=> ', 'device.controlTransferOut({', 'requestType: ', \"'class',\", 'recipient: ', \"'interface',\", 'request: ', '0x22,', 'value: ', '0x01', 'index: ', '0x02}))', '.then(result ', '=> ', '{', 'let ', 'decoder ', '= ', 'new ', 'TextDecoder();', \"console.log('Recieved: ' \", \"+ \", 'decoder.decode(result.data));', '})', '.catch(error ', '=> ', '{ ', 'console.log(error); ', '});'],\n\n\tpython: ['def ', 'get_user_input(prompt): ','user_input ','= ','input(prompt) ','return ', 'user_input.strip() ','def ', 'ask_question(question, ', 'answer): ', 'user_answer ', '= ', 'get_user_input(question ', '+ ', '\" ', '\")', 'if ', 'user_answer.lower() ', '== ', 'answer.lower(): ', 'print(\"Correct!\")', 'return ','1', 'else: ', 'print(f\"Wrong! ', 'The ', 'correct ', 'answer ', 'is ', '{answer}.\")', 'return ', '0', 'def ', 'quiz():', 'score ', '= ', '0', 'for ','question, ', 'answer ', 'in ', 'random.sample(questions.items(), ', 'k=len(questions)): ', 'score ', '+= ', 'ask_question(question, ', 'answer)', 'print(f\"You ', 'scored ', '{score}/{len(questions)}.\")', 'if ', '__name__ ', '== ', '\"__main__\":', 'print(\"Welcome ', 'to ', 'the ', 'Quiz!\")', 'quiz()'],\n\n\trust: ['use ', 'reqwest;', 'use ', 'serde_json::Value;', 'use ', 'std::env;', '#[cfg(test)]', 'use ', 'mockito;', 'fn ', 'main() ', '-> ', 'Result<(), ', 'reqwest::Error> ', '{', 'let ', 'api_key ', '= ', '\"YOUR_API_KEY\";','let ', 'city ', '= ', '\"London\";', 'let ' , 'url ', '= ', 'format!( ', '\"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}\",', 'city, ', 'api_key', ');', 'let ', 'response ', '= ', 'reqwest::blocking::get(&url)?;', 'if ', 'response.status().is_success() ', '{', 'let ', 'weather_data: ', 'Value ', '= ', 'response.json()?;', 'println!(\"Weather ', 'in ', '{}: ', '{}\", ', 'city, ', 'weather_data);', 'save_to_mock_server(&weather_data);', '}', 'else ', '{', 'println!(\"Error: ', 'Unable ', 'to ', 'fetch ', 'weather data\");', '}', 'Ok(())', '}', 'fn ', 'save_to_mock_server(weather_data: ', '&Value) ', '{', 'let ', 'mock_server_url ', '= ','format!(\"{}/weather\", ','env::var(\"MOCK_SERVER_URL\").unwrap_or_else(|_| ', '\"http://127.0.0.1:1234\".to_string()));'],\n\n}\n\n\n\nexport default prompts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}